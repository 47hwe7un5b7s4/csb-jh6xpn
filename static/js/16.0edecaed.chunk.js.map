{"version":3,"sources":["components/pages/Input.tsx","components/pages/settings/settingsRow.tsx","components/pages/settings/settings.tsx"],"names":["Input","initial","name","display","uuid","setUUID","useState","value","setValue","textInput","React","createRef","onSubmit","e","a","preventDefault","axios","get","catch","error","response","data","success","localStorage","setItem","player","id","alert","className","alt","src","ref","type","onChange","current","SettingsRow","setNavbarUuid","setUuid","username","Settings","map","fallback","promiseFn","getItem","isLoading","undefined"],"mappings":"gPAMO,SAASA,EAAT,GAYH,IAXAC,EAWD,EAXCA,QACAC,EAUD,EAVCA,KACAC,EASD,EATCA,QACAC,EAQD,EARCA,KACAC,EAOD,EAPCA,QAQA,EAA0BC,mBAASL,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KACIC,EAAYC,IAAMC,YAEtB,OACI,kBAEIC,SAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,6DACND,EAAEE,iBADI,SAIIC,IACDC,IAAI,4CAA8CV,GAClDW,OAAM,SAACC,GAAD,OAAWA,EAAMC,YAN1B,QAGAC,EAHA,OAOJA,MACOC,SACLC,aAAaC,QAAQtB,EAAMmB,EAAKA,KAAKI,OAAOC,IAC5CrB,EAAQgB,EAAKA,KAAKI,OAAOC,KAGzBC,MAAM,kCAbJ,2CAAF,sDAFZ,UAmBI,0BACI,0BAA4BxB,MAEhC,4BACI,wBAEY,mRAFZ,UAsBI,iBACIyB,UAAW,UACXC,IAAK,YACLC,IAAK,gCAAkC1B,IAG3C,iBACIwB,UAAW,UACXC,IAAK,YACLC,IAAK,gCAAkC1B,EAAO,gBAItD,iBACI2B,IAAKtB,EACLuB,KAAM,OACNzB,MAAOA,EACP0B,SAAU,0BAAMzB,EAAQ,oBAACC,EAAUyB,eAAX,aAAC,EAAmB3B,aAApB,QAA6B,2CAGzD,iBACIyB,KAAK,SAELzB,MAAO,sB,oGAnER,8B,kGAkBO,+F,8FACE,sB,+FAEJ,iH,2UA2BO,kC,+FAMA,kC,kGAQJ,ib,mGAIA,6ZCtFpB,SAAS4B,EAAT,GAQH,IAAD,IAPCH,EAOD,EAPCA,KACAX,EAMD,EANCA,KACAe,EAKD,EALCA,cAMA,EAAwB9B,mBAAQ,UAACe,EAAKA,KAAKI,OAAOC,UAAlB,QAAwB,IAAxD,mBAAOtB,EAAP,KAAaiC,EAAb,KACA,OACI,cAACrC,EAAD,CACIG,QAAS6B,EAAK7B,QACdD,KAAM8B,EAAK9B,KACXE,KAAMA,EACNC,QAAS,SAACD,GACNiC,EAAQjC,GACJgC,GAAeA,EAAchC,IAErCH,QAAO,UACFoB,EAAKC,QAAUD,EAAKA,KAAKI,OAAOa,SAAW,8CADzC,QAEH,yCCdD,SAASC,EAAT,GAAqE,IAAjDF,EAAgD,EAAhDA,QAC/B,OACI,0BACK,CACG,CAAEnC,KAAM,QAASC,QAAS,qBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,kBAC1B,CAAED,KAAM,QAASC,QAAS,oBAC5BqC,KAAI,SAACR,GACH,OACI,cAAC,WAAD,CAA0BS,SAAU,6BAApC,SACI,cAAC,IAAD,CACIC,UAAS,sBAAE,sBAAA5B,EAAA,sEACDE,IACDC,IAAI,4CAA8CM,aAAaoB,QAAQX,EAAK9B,OAC5EgB,OAAM,SAACC,GAAD,OAAWA,EAAMC,YAHrB,mFADf,SAOK,YAAiF,IAA9EC,EAA6E,EAA7EA,KACA,OAD6E,EAAvEuB,UAEF,6BAEA,cAACT,EAAD,CACIH,KAAMA,EACNX,KAAMA,EAAKA,KACXe,cAA6B,UAAdJ,EAAK9B,KAAmBmC,OAAUQ,QAftDb,EAAK9B,W,qGAdpB","file":"static/js/16.0edecaed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport tw from 'twin.macro';\nimport axios from 'axios';\nimport { css } from 'styled-components';\nimport {playerDB} from \"./settings/settings\";\n\nexport function Input({\n    initial,\n    name,\n    display,\n    uuid,\n    setUUID,\n}: {\n    initial: string;\n    name: string;\n    display: string;\n    uuid: string;\n    setUUID: (uuid: string) => void;\n}) {\n    const [value, setValue] = useState(initial);\n    let textInput = React.createRef<HTMLInputElement>();\n\n    return (\n        <form\n            css={tw`w-full m-4`}\n            onSubmit={async (e) => {\n                e.preventDefault();\n\n                const data: playerDB = (\n                    await axios\n                        .get('https://playerdb.co/api/player/minecraft/' + value)\n                        .catch((error) => error.response)\n                ).data;\n                if (data.success) {\n                    localStorage.setItem(name, data.data.player.id!);\n                    setUUID(data.data.player.id!);\n                    //window.location.reload();\n                } else {\n                    alert('Error, Invalid Username / UUID');\n                }\n            }}\n        >\n            <label css={tw`w-full text-2xl my-1`}>\n                <div css={tw`text-center`}>{display}</div>\n            </label>\n            <div css={tw`flex flex-col md:flex-row content-center`}>\n                <div\n                    css={css`\n                        ${tw`w-max inline-block rounded-sm my-2 md:my-auto mx-auto md:mx-initial overflow-hidden `}\n                        .default {\n                            display: block;\n                        }\n\n                        .overlay {\n                            display: none;\n                        }\n\n                        :hover {\n                            .default {\n                                display: none;\n                            }\n\n                            .overlay {\n                                display: block;\n                            }\n                        }\n                    `}\n                >\n                    <img\n                        className={'default'}\n                        alt={'User Icon'}\n                        src={'https://crafatar.com/avatars/' + uuid}\n                        css={tw`h-10 w-10`}\n                    />\n                    <img\n                        className={'overlay'}\n                        alt={'User Icon'}\n                        src={'https://crafatar.com/avatars/' + uuid + '?overlay'}\n                        css={tw`h-10 w-10`}\n                    />\n                </div>\n                <input\n                    ref={textInput}\n                    type={'text'}\n                    value={value}\n                    onChange={() => setValue(textInput.current?.value ?? 'da8a8993-adfa-4d29-99b1-9d0f62fbb78d')}\n                    css={tw`h-10 py-2 px-2 rounded-md hover:outline-none focus:outline-none my-3 md:my-0 md:mx-3 w-60 md:w-auto`}\n                />\n                <input\n                    type=\"submit\"\n                    css={tw`px-3 py-2 h-10 rounded-md bg-gray-300 hover:cursor-pointer hover:outline-none focus:outline-none w-60 md:w-auto`}\n                    value={'Update Skin'}\n                />\n            </div>\n        </form>\n    );\n}\n","import React, { useState } from 'react';\nimport { Input } from '../Input';\nimport { playerDB } from './settings';\n\nexport function SettingsRow({\n    type,\n    data,\n    setNavbarUuid,\n}: {\n    type: { name: string; display: string };\n    data: playerDB;\n    setNavbarUuid?: (uuid: string) => void;\n}) {\n    const [uuid, setUuid] = useState(data.data.player.id ?? '');\n    return (\n        <Input\n            display={type.display}\n            name={type.name}\n            uuid={uuid}\n            setUUID={(uuid) => {\n                setUuid(uuid);\n                if (setNavbarUuid) setNavbarUuid(uuid);\n            }}\n            initial={\n                (data.success ? data.data.player.username : 'da8a8993-adfa-4d29-99b1-9d0f62fbb78d') ??\n                'da8a8993-adfa-4d29-99b1-9d0f62fbb78d'\n            }\n        />\n    );\n}\n","import tw from 'twin.macro';\nimport React, { Suspense } from 'react';\nimport { Async } from 'react-async';\nimport axios, { AxiosResponse } from 'axios';\nimport { SettingsRow } from './settingsRow';\n\nexport interface playerDB {\n    data: { player: { username?: string; id?: string } };\n    success: boolean;\n}\n\nexport default function Settings({ setUuid }: { setUuid: (uuid: string) => void }) {\n    return (\n        <div css={tw`p-4 mt-10 w-max mx-auto bg-gray-200 rounded-lg`}>\n            {[\n                { name: 'skin0', display: 'Default Skin Name' },\n                { name: 'skin1', display: 'Default Skin 2' },\n                { name: 'skin2', display: 'Default Skin 3' },\n                { name: 'skin3', display: 'Default Skin 4' },\n                { name: 'skin4', display: 'Default Skin 5' },\n                { name: 'skin5', display: 'Default Skin 6' },\n                { name: 'skin6', display: 'Default Skin 7' },\n                { name: 'skin7', display: 'Default Skin 8' },\n                { name: 'skin8', display: 'Default Skin 9' },\n                { name: 'skin9', display: 'Default Skin 10' },\n            ].map((type) => {\n                return (\n                    <Suspense key={type.name} fallback={<></>}>\n                        <Async\n                            promiseFn={async () =>\n                                await axios\n                                    .get('https://playerdb.co/api/player/minecraft/' + localStorage.getItem(type.name))\n                                    .catch((error) => error.response)\n                            }\n                        >\n                            {({ data, isLoading }: { data: AxiosResponse<playerDB>; isLoading: boolean }) => {\n                                return isLoading ? (\n                                    <></>\n                                ) : (\n                                    <SettingsRow\n                                        type={type}\n                                        data={data.data}\n                                        setNavbarUuid={type.name === 'skin0' ? setUuid : undefined}\n                                    />\n                                );\n                            }}\n                        </Async>\n                    </Suspense>\n                );\n            })}\n        </div>\n    );\n}\n"],"sourceRoot":""}