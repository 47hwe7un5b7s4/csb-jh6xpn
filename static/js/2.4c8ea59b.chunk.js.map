{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/move.ts","../../src/utils/omitKeys.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/Subject.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../node_modules/downloadjs/download.js"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","keyName","map","cloneObject","Set","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","Subscription","tearDowns","tearDown","this","push","teardown","Subscriber","observer","subscription","closed","add","next","Subject","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","disabled","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isBlurEvent","isTouched","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","error","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","props","formOptions","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","watch","_timer","_names","unMount","array","_validateCount","_subjects","control","state","validationMode","getValidationModes","isValidateAllFieldCriteria","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","fieldState","previousError","shouldUpdateValid","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","getResolverOptions","executeResolverValidation","validateForm","shouldCheckValid","valid","validateField","fieldError","handleChange","event","onBlur","onChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","getValues","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isMounted","isGlobal","fieldValues","convertToArrayPayload","_updateFieldArray","method","output","shouldSet","shouldSetFields","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","setValue","isFieldArray","schemaResult","Promise","all","shouldFocus","clearErrors","inputName","setError","subscribe","info","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","register","querySelectorAll","isRadioOrCheckboxFunction","_shouldUnregister","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","live","_updateProps","useForm","_formControl","updateFormState","formStateSubscription","shouldRenderFormState","unsubscribe","getProxyFormState","define","download","strFileName","strMimeType","blob","reader","self","defaultMime","mimeType","payload","url","anchor","createElement","toString","String","myBlob","Blob","MozBlob","WebKitBlob","fileName","call","pop","href","indexOf","ajax","XMLHttpRequest","open","responseType","onload","response","send","navigator","msSaveBlob","dataUrlToBlob","saver","i","tempUiArr","Uint8Array","mx","charCodeAt","strUrl","parts","binData","atob","decodeURIComponent","uiArr","winMode","setAttribute","className","innerHTML","style","display","body","appendChild","click","removeChild","URL","revokeObjectURL","userAgent","confirm","location","f","src","createObjectURL","constructor","btoa","y","encodeURIComponent","FileReader","readAsDataURL"],"mappings":"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","file":"static/js/2.4c8ea59b.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _formValues = formOptions.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields as TFieldValues, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n\n      if (isBlurEvent && field._f.onBlur) {\n        field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      set(_formValues, name, inputValue);\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    shouldSkipValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isMounted,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(isMounted || _stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    values = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields as TFieldValues, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields as TFieldValues,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(values, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      values &&\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(values, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(values, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field && field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          false,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    (!options || !options.disabled) &&\n      _updateValidAndInputValue(name, false, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n\n    if (field && isBoolean(options.disabled)) {\n      set(\n        _formValues,\n        name,\n        options.disabled\n          ? undefined\n          : get(_formValues, name, getFieldValue(field._f)),\n      );\n    }\n\n    !field && _updateValidAndInputValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n"],"sourceRoot":""}